// Code generated by MockGen. DO NOT EDIT.
// Source: mm.go

// Package mock_tests is a generated GoMock package.
package mock_tests

import (
	reflect "reflect"

	mqtt "github.com/eclipse/paho.mqtt.golang"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// IsConnected mocks base method
func (m *MockClient) IsConnected() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsConnected")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsConnected indicates an expected call of IsConnected
func (mr *MockClientMockRecorder) IsConnected() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsConnected", reflect.TypeOf((*MockClient)(nil).IsConnected))
}

// IsConnectionOpen mocks base method
func (m *MockClient) IsConnectionOpen() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsConnectionOpen")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsConnectionOpen indicates an expected call of IsConnectionOpen
func (mr *MockClientMockRecorder) IsConnectionOpen() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsConnectionOpen", reflect.TypeOf((*MockClient)(nil).IsConnectionOpen))
}

// Connect mocks base method
func (m *MockClient) Connect() mqtt.Token {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(mqtt.Token)
	return ret0
}

// Connect indicates an expected call of Connect
func (mr *MockClientMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockClient)(nil).Connect))
}

// Disconnect mocks base method
func (m *MockClient) Disconnect(quiesce uint) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Disconnect", quiesce)
}

// Disconnect indicates an expected call of Disconnect
func (mr *MockClientMockRecorder) Disconnect(quiesce interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockClient)(nil).Disconnect), quiesce)
}

// Publish mocks base method
func (m *MockClient) Publish(topic string, qos byte, retained bool, payload interface{}) mqtt.Token {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", topic, qos, retained, payload)
	ret0, _ := ret[0].(mqtt.Token)
	return ret0
}

// Publish indicates an expected call of Publish
func (mr *MockClientMockRecorder) Publish(topic, qos, retained, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockClient)(nil).Publish), topic, qos, retained, payload)
}

// Subscribe mocks base method
func (m *MockClient) Subscribe(topic string, qos byte, callback mqtt.MessageHandler) mqtt.Token {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", topic, qos, callback)
	ret0, _ := ret[0].(mqtt.Token)
	return ret0
}

// Subscribe indicates an expected call of Subscribe
func (mr *MockClientMockRecorder) Subscribe(topic, qos, callback interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockClient)(nil).Subscribe), topic, qos, callback)
}

// SubscribeMultiple mocks base method
func (m *MockClient) SubscribeMultiple(filters map[string]byte, callback mqtt.MessageHandler) mqtt.Token {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeMultiple", filters, callback)
	ret0, _ := ret[0].(mqtt.Token)
	return ret0
}

// SubscribeMultiple indicates an expected call of SubscribeMultiple
func (mr *MockClientMockRecorder) SubscribeMultiple(filters, callback interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeMultiple", reflect.TypeOf((*MockClient)(nil).SubscribeMultiple), filters, callback)
}

// Unsubscribe mocks base method
func (m *MockClient) Unsubscribe(topics ...string) mqtt.Token {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range topics {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Unsubscribe", varargs...)
	ret0, _ := ret[0].(mqtt.Token)
	return ret0
}

// Unsubscribe indicates an expected call of Unsubscribe
func (mr *MockClientMockRecorder) Unsubscribe(topics ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockClient)(nil).Unsubscribe), topics...)
}

// AddRoute mocks base method
func (m *MockClient) AddRoute(topic string, callback mqtt.MessageHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddRoute", topic, callback)
}

// AddRoute indicates an expected call of AddRoute
func (mr *MockClientMockRecorder) AddRoute(topic, callback interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRoute", reflect.TypeOf((*MockClient)(nil).AddRoute), topic, callback)
}

// OptionsReader mocks base method
func (m *MockClient) OptionsReader() mqtt.ClientOptionsReader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OptionsReader")
	ret0, _ := ret[0].(mqtt.ClientOptionsReader)
	return ret0
}

// OptionsReader indicates an expected call of OptionsReader
func (mr *MockClientMockRecorder) OptionsReader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OptionsReader", reflect.TypeOf((*MockClient)(nil).OptionsReader))
}

// MockMessage is a mock of Message interface
type MockMessage struct {
	ctrl     *gomock.Controller
	recorder *MockMessageMockRecorder
}

// MockMessageMockRecorder is the mock recorder for MockMessage
type MockMessageMockRecorder struct {
	mock *MockMessage
}

// NewMockMessage creates a new mock instance
func NewMockMessage(ctrl *gomock.Controller) *MockMessage {
	mock := &MockMessage{ctrl: ctrl}
	mock.recorder = &MockMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMessage) EXPECT() *MockMessageMockRecorder {
	return m.recorder
}

// Duplicate mocks base method
func (m *MockMessage) Duplicate() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Duplicate")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Duplicate indicates an expected call of Duplicate
func (mr *MockMessageMockRecorder) Duplicate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Duplicate", reflect.TypeOf((*MockMessage)(nil).Duplicate))
}

// Qos mocks base method
func (m *MockMessage) Qos() byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Qos")
	ret0, _ := ret[0].(byte)
	return ret0
}

// Qos indicates an expected call of Qos
func (mr *MockMessageMockRecorder) Qos() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Qos", reflect.TypeOf((*MockMessage)(nil).Qos))
}

// Retained mocks base method
func (m *MockMessage) Retained() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Retained")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Retained indicates an expected call of Retained
func (mr *MockMessageMockRecorder) Retained() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Retained", reflect.TypeOf((*MockMessage)(nil).Retained))
}

// Topic mocks base method
func (m *MockMessage) Topic() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Topic")
	ret0, _ := ret[0].(string)
	return ret0
}

// Topic indicates an expected call of Topic
func (mr *MockMessageMockRecorder) Topic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Topic", reflect.TypeOf((*MockMessage)(nil).Topic))
}

// MessageID mocks base method
func (m *MockMessage) MessageID() uint16 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageID")
	ret0, _ := ret[0].(uint16)
	return ret0
}

// MessageID indicates an expected call of MessageID
func (mr *MockMessageMockRecorder) MessageID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageID", reflect.TypeOf((*MockMessage)(nil).MessageID))
}

// Payload mocks base method
func (m *MockMessage) Payload() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Payload")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Payload indicates an expected call of Payload
func (mr *MockMessageMockRecorder) Payload() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Payload", reflect.TypeOf((*MockMessage)(nil).Payload))
}

// Ack mocks base method
func (m *MockMessage) Ack() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Ack")
}

// Ack indicates an expected call of Ack
func (mr *MockMessageMockRecorder) Ack() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ack", reflect.TypeOf((*MockMessage)(nil).Ack))
}
